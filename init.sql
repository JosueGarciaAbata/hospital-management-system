-- ================================================
-- Hospital Management System - Esquema Particionado
-- Requiere PostgreSQL 12+
-- ================================================

BEGIN;

-- Extensiones necesarias
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- ================================================
-- Tablas Globales (NO particionadas)
-- ================================================
CREATE TABLE medical_centers (
                                 id         BIGSERIAL PRIMARY KEY,
                                 name       VARCHAR(100) NOT NULL,
                                 city       VARCHAR(100) NOT NULL,
                                 address    VARCHAR(200) NOT NULL,
                                 created_at TIMESTAMP    NOT NULL DEFAULT now(),
                                 updated_at TIMESTAMP    NOT NULL DEFAULT now(),
                                 deleted    BOOLEAN      NOT NULL DEFAULT FALSE,
                                 version    BIGINT       NOT NULL DEFAULT 0
);

CREATE UNIQUE INDEX uq_med_centers_name_addr_active
    ON medical_centers (LOWER(name), LOWER(address))
    WHERE deleted = FALSE;

CREATE INDEX idx_med_centers_name ON medical_centers (LOWER(name));
CREATE INDEX idx_med_centers_city ON medical_centers (LOWER(city));

CREATE TABLE specialties (
                             id BIGSERIAL PRIMARY KEY,
                             name VARCHAR(100) NOT NULL,
                             description TEXT,
                             created_at TIMESTAMP NOT NULL DEFAULT now(),
                             updated_at TIMESTAMP NOT NULL DEFAULT now(),
                             deleted BOOLEAN NOT NULL DEFAULT FALSE,
                             version BIGINT NOT NULL DEFAULT 0
);

CREATE UNIQUE INDEX uq_specialties_name_active
    ON specialties (LOWER(name)) WHERE deleted = FALSE;

CREATE INDEX idx_specialties_name ON specialties (LOWER(name));

CREATE TABLE roles (
                       id BIGSERIAL PRIMARY KEY,
                       name VARCHAR(50) NOT NULL UNIQUE
);

-- ================================================
-- USERS (particionada por center_id)
-- ================================================
CREATE TABLE users (
                       id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                       center_id BIGINT NOT NULL REFERENCES medical_centers(id) ON DELETE CASCADE,
                       dni VARCHAR(20) NOT NULL,
                       email VARCHAR(50) NOT NULL,
                       password VARCHAR(255) NOT NULL,
                       gender VARCHAR(10),
                       first_name VARCHAR(100) NOT NULL,
                       last_name VARCHAR(100) NOT NULL,
                       enabled BOOLEAN NOT NULL DEFAULT TRUE,
                       created_at TIMESTAMP NOT NULL DEFAULT now(),
                       updated_at TIMESTAMP NOT NULL DEFAULT now(),
                       PRIMARY KEY (center_id, id)
) PARTITION BY LIST (center_id);

-- Unicidades por centro
CREATE UNIQUE INDEX uq_users_dni_per_center   ON users (center_id, dni);
CREATE UNIQUE INDEX uq_users_email_per_center ON users (center_id, LOWER(email));

-- ================================================
-- PATIENTS (particionada por center_id)
-- ================================================
CREATE TABLE patients (
                          id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                          center_id BIGINT NOT NULL REFERENCES medical_centers(id) ON DELETE CASCADE,
                          dni VARCHAR(20) NOT NULL,
                          first_name VARCHAR(100) NOT NULL,
                          last_name VARCHAR(100) NOT NULL,
                          birth_date DATE NOT NULL,
                          gender VARCHAR(10),
                          deleted BOOLEAN NOT NULL DEFAULT FALSE,
                          created_at TIMESTAMP NOT NULL DEFAULT now(),
                          updated_at TIMESTAMP NOT NULL DEFAULT now(),
                          PRIMARY KEY (center_id, id)
) PARTITION BY LIST (center_id);

CREATE UNIQUE INDEX uq_patients_dni_per_center ON patients (center_id, dni);
CREATE INDEX idx_patients_name ON patients (LOWER(last_name), LOWER(first_name)) WHERE deleted = FALSE;

-- ================================================
-- DOCTORS (particionada por center_id)
-- Nota: denormalizamos center_id desde users
-- ================================================
CREATE TABLE doctors (
                         id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                         center_id BIGINT NOT NULL,
                         user_id BIGINT NOT NULL,
                         specialty_id BIGINT,
                         created_at TIMESTAMP NOT NULL DEFAULT now(),
                         updated_at TIMESTAMP NOT NULL DEFAULT now(),
                         deleted BOOLEAN NOT NULL DEFAULT FALSE,
                         version BIGINT NOT NULL DEFAULT 0,
                         PRIMARY KEY (center_id, id),
                         CONSTRAINT fk_doctor_user
                             FOREIGN KEY (center_id, user_id) REFERENCES users(center_id, id) ON DELETE CASCADE,
                         CONSTRAINT fk_doctor_specialty
                             FOREIGN KEY (specialty_id) REFERENCES specialties(id) ON DELETE SET NULL
) PARTITION BY LIST (center_id);

CREATE UNIQUE INDEX uq_doctor_user_active_per_center
    ON doctors (center_id, user_id) WHERE deleted = FALSE;

CREATE INDEX idx_doctors_specialty_active
    ON doctors (specialty_id) WHERE deleted = FALSE;

-- ================================================
-- MEDICAL_CONSULTATIONS (particionada por center_id)
-- ================================================
CREATE TABLE medical_consultations (
                                       id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                       center_id BIGINT NOT NULL,
                                       patient_id BIGINT NOT NULL,
                                       doctor_id BIGINT NOT NULL,
                                       "date" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                       diagnosis TEXT,
                                       treatment TEXT,
                                       notes TEXT,
                                       deleted BOOLEAN NOT NULL DEFAULT FALSE,
                                       created_at TIMESTAMP NOT NULL DEFAULT now(),
                                       updated_at TIMESTAMP NOT NULL DEFAULT now(),
                                       PRIMARY KEY (center_id, id),
                                       CONSTRAINT fk_mc_patient FOREIGN KEY (center_id, patient_id) REFERENCES patients(center_id, id) ON DELETE CASCADE,
                                       CONSTRAINT fk_mc_doctor  FOREIGN KEY (center_id, doctor_id)  REFERENCES doctors(center_id, id)  ON DELETE CASCADE,
                                       CONSTRAINT fk_mc_center  FOREIGN KEY (center_id) REFERENCES medical_centers(id) ON DELETE CASCADE
) PARTITION BY LIST (center_id);

CREATE INDEX idx_mc_doctor_per_center  ON medical_consultations (center_id, doctor_id);
CREATE INDEX idx_mc_patient_per_center ON medical_consultations (center_id, patient_id);
CREATE INDEX idx_mc_date_per_center    ON medical_consultations (center_id, "date");
CREATE INDEX idx_mc_not_deleted_date   ON medical_consultations ("date") WHERE deleted = FALSE;

-- ================================================
-- VERIFICATION_TOKENS (particionada por center_id)
-- Nota: denormalizamos center_id desde users
-- ================================================
CREATE TABLE verification_tokens (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                     center_id BIGINT NOT NULL,
                                     user_id BIGINT NOT NULL,
                                     token VARCHAR(255) NOT NULL,
                                     used BOOLEAN NOT NULL,
                                     expiration TIMESTAMP NOT NULL,
                                     PRIMARY KEY (center_id, id),
                                     CONSTRAINT fk_vt_user FOREIGN KEY (center_id, user_id) REFERENCES users(center_id, id) ON DELETE CASCADE
) PARTITION BY LIST (center_id);

CREATE INDEX idx_vt_user ON verification_tokens (center_id, user_id);
CREATE UNIQUE INDEX uq_vt_token_per_center ON verification_tokens (center_id, token);

-- ================================================
-- USERS_ROLES (particionada por center_id)
-- Nota: añadimos center_id
-- ================================================
CREATE TABLE users_roles (
                             center_id BIGINT NOT NULL,
                             user_id BIGINT NOT NULL,
                             role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
                             PRIMARY KEY (center_id, user_id, role_id),
                             CONSTRAINT fk_ur_user FOREIGN KEY (center_id, user_id) REFERENCES users(center_id, id) ON DELETE CASCADE
) PARTITION BY LIST (center_id);

-- ================================================
-- Infraestructura: creación automática de particiones
-- Se dispara al insertar un nuevo medical_center
-- ================================================

-- Helper: crea una partición LIST para una tabla particionada dada y un center_id.
CREATE OR REPLACE FUNCTION _create_list_partition_if_absent(
    p_parent regclass,
    p_center_id bigint,
    p_suffix text DEFAULT NULL
) RETURNS void LANGUAGE plpgsql AS
$$
DECLARE
    v_schema text;
    v_parent text;
    v_part_name text;
    v_fq_part text;
    v_sql text;
BEGIN
    -- obtener schema y nombre del padre con precisión
    SELECT n.nspname, c.relname
    INTO v_schema, v_parent
    FROM pg_class c
             JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE c.oid = p_parent;

    -- nombre de la partición: <parent>[_<suffix>]_c<center_id>
    v_part_name := CASE WHEN p_suffix IS NULL OR p_suffix = ''
                            THEN format('%s_c%s', v_parent, p_center_id)
                        ELSE format('%s_%s_c%s', v_parent, p_suffix, p_center_id)
        END;

    -- fqdn correctamente escapado
    v_fq_part := format('%I.%I', v_schema, v_part_name);

    -- si ya existe, salir
    IF to_regclass(v_fq_part) IS NOT NULL THEN
        RETURN;
    END IF;

    -- crear partición
    v_sql := format('CREATE TABLE %s PARTITION OF %s FOR VALUES IN (%s);',
                    v_fq_part, p_parent::text, p_center_id);
    EXECUTE v_sql;
END;
$$;

-- Crea particiones para todas las tablas por un center_id (usa advisory lock BIGINT)
CREATE OR REPLACE FUNCTION ensure_center_partitions(p_center_id bigint)
    RETURNS void LANGUAGE plpgsql AS
$$
DECLARE
    v_lock_key bigint := (987654::bigint << 32) + p_center_id;
BEGIN
    PERFORM pg_advisory_lock(v_lock_key);

    PERFORM _create_list_partition_if_absent('users'::regclass,                 p_center_id, NULL);
    PERFORM _create_list_partition_if_absent('patients'::regclass,              p_center_id, NULL);
    PERFORM _create_list_partition_if_absent('doctors'::regclass,               p_center_id, NULL);
    PERFORM _create_list_partition_if_absent('medical_consultations'::regclass, p_center_id, NULL);
    PERFORM _create_list_partition_if_absent('verification_tokens'::regclass,   p_center_id, NULL);
    PERFORM _create_list_partition_if_absent('users_roles'::regclass,           p_center_id, NULL);

    PERFORM pg_advisory_unlock(v_lock_key);
END;
$$;

-- Trigger: tras insertar un medical_center, auto-crear particiones
CREATE OR REPLACE FUNCTION trg_mc_after_insert_create_partitions()
    RETURNS trigger LANGUAGE plpgsql AS
$$
BEGIN
    PERFORM ensure_center_partitions(NEW.id);
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS mc_auto_partitions ON medical_centers;
CREATE TRIGGER mc_auto_partitions
    AFTER INSERT ON medical_centers
    FOR EACH ROW EXECUTE FUNCTION trg_mc_after_insert_create_partitions();

-- ================================================
-- Índices en PADRES (se propagan a particiones nuevas)
-- (ya creados arriba; en PG12+ los índices creados en el padre
-- se aplican automáticamente a nuevas particiones)
-- ================================================

COMMIT;

-- ================================================
-- ===============    SEEDS     ====================
-- Nota: al insertar centros, el trigger creará particiones.
-- ================================================

BEGIN;

-- Roles
INSERT INTO roles (name) VALUES ('ADMIN');
INSERT INTO roles (name) VALUES ('DOCTOR');

-- Medical Centers (dispara creación de particiones)
INSERT INTO medical_centers (name, city, address) VALUES
                                                      ('Hospital Metropolitano',         'Quito',      'Av. Principal 123'),
                                                      ('Hospital Luis Vernaza',          'Guayaquil',  'Loja 700 y Escobedo'),
                                                      ('Hospital General Docente Ambato','Ambato',     'Av. Luis Pasteur y Av. Unidad Nacional');

-- Specialties
INSERT INTO specialties (name, description) VALUES
                                                ('Medicina General', 'Especialidad general para atención primaria'),
                                                ('Pediatría', 'Atención médica a niños y adolescentes'),
                                                ('Cardiología', 'Diagnóstico y tratamiento de enfermedades del corazón y sistema circulatorio'),
                                                ('Dermatología', 'Diagnóstico y tratamiento de enfermedades de la piel, cabello y uñas'),
                                                ('Ginecología', 'Atención de la salud reproductiva femenina'),
                                                ('Neurología', 'Diagnóstico y tratamiento de trastornos del sistema nervioso'),
                                                ('Psiquiatría', 'Atención de trastornos mentales y emocionales'),
                                                ('Oftalmología', 'Prevención y tratamiento de enfermedades de los ojos'),
                                                ('Ortopedia', 'Tratamiento de lesiones y enfermedades del sistema musculoesquelético'),
                                                ('Oncología', 'Prevención, diagnóstico y tratamiento del cáncer');

-- Admins por centro (IDs se resuelven por DNI luego)
INSERT INTO users (center_id, dni, email, password, gender, first_name, last_name, enabled)
VALUES
    (1, '1500903685', 'josuegarcab2@hotmail.com',   crypt('admin123', gen_salt('bf')), 'MALE',   'System', 'Admin', TRUE),
    (2, '0912345678', 'admin.guayaquil@example.com', crypt('admin123', gen_salt('bf')), 'FEMALE', 'System', 'Admin', TRUE),
    (3, '1712345678', 'admin.ambato@example.com',    crypt('admin123', gen_salt('bf')), 'MALE',   'System', 'Admin', TRUE);

-- Doctores (como usuarios)
INSERT INTO users (center_id, dni, email, password, gender, first_name, last_name, enabled) VALUES
                                                                                                (1,'1849488182','doctor@hotmail.com',                crypt('doctor123',gen_salt('bf')),'MALE','Juan','Perez',TRUE),
                                                                                                (1,'1552501056','martin.gomez@hospital.com',        crypt('doctor123',gen_salt('bf')),'MALE','Martin','Gomez',TRUE),
                                                                                                (1,'0820194900','valeria.silva@hospital.com',       crypt('doctor123',gen_salt('bf')),'FEMALE','Valeria','Silva',TRUE),
                                                                                                (3,'2335515249','ricardo.fuentes@hospital.com',     crypt('doctor123',gen_salt('bf')),'MALE','Ricardo','Fuentes',TRUE),
                                                                                                (3,'0227907425','laura.morales@hospital.com',       crypt('doctor123',gen_salt('bf')),'FEMALE','Laura','Morales',TRUE),
                                                                                                (3,'1509184485','javier.ortiz@hospital.com',        crypt('doctor123',gen_salt('bf')),'MALE','Javier','Ortiz',FALSE),
                                                                                                (2,'2002638654','carolina.mendez@hospital.com',     crypt('doctor123',gen_salt('bf')),'FEMALE','Carolina','Mendez',FALSE),
                                                                                                (2,'1617335060','sergio.ruiz@hospital.com',         crypt('doctor123',gen_salt('bf')),'MALE','Sergio','Ruiz',FALSE),
                                                                                                (2,'1209534963','andrea.castro@hospital.com',       crypt('doctor123',gen_salt('bf')),'FEMALE','Andrea','Castro',FALSE);

-- Asignar rol ADMIN a los 3 admins (buscando por DNI)
INSERT INTO users_roles (center_id, user_id, role_id)
SELECT u.center_id, u.id, r.id
FROM users u
         JOIN roles r ON r.name = 'ADMIN'
WHERE u.dni IN ('1500903685','0912345678','1712345678');

-- Asignar rol DOCTOR a los doctores (por DNI)
INSERT INTO users_roles (center_id, user_id, role_id)
SELECT u.center_id, u.id, r.id
FROM users u
         JOIN roles r ON r.name = 'DOCTOR'
WHERE u.dni IN ('1849488182','1552501056','0820194900','2335515249','0227907425','1509184485','2002638654','1617335060','1209534963');

-- Crear perfiles de doctor ligando user -> specialty (por DNI y nombre de especialidad)
WITH map(dni, spec_name) AS (
    VALUES
        ('1849488182','Medicina General'),
        ('1552501056','Pediatría'),
        ('0820194900','Cardiología'),
        ('2335515249','Dermatología'),
        ('0227907425','Ginecología'),
        ('1509184485','Neurología'),
        ('2002638654','Psiquiatría'),
        ('1617335060','Oftalmología'),
        ('1209534963','Ortopedia')
)
INSERT INTO doctors (center_id, user_id, specialty_id, deleted)
SELECT u.center_id, u.id, s.id, NOT u.enabled
FROM users u
         JOIN map m ON m.dni = u.dni
         JOIN specialties s ON s.name = m.spec_name AND s.deleted = FALSE
WHERE NOT EXISTS (
    SELECT 1 FROM doctors d WHERE d.center_id = u.center_id AND d.user_id = u.id
);

-- Pacientes
INSERT INTO patients (center_id, dni, first_name, last_name, birth_date, gender, deleted) VALUES
                                                                                              (1,'patient001','Alice','Johnson','1990-01-15','FEMALE',FALSE),
                                                                                              (1,'patient002','Bob','Smith','1985-06-20','MALE',FALSE),
                                                                                              (2,'patient003','Carol','Davis','2000-03-10','FEMALE',FALSE),
                                                                                              (2,'patient004','David','Martinez','1995-09-05','MALE',FALSE),
                                                                                              (3,'patient005','Eva','Lopez','1988-12-30','FEMALE',FALSE);

-- Consultas médicas (resolviendo IDs por DNI para no depender de numeraciones)
WITH p AS (
    SELECT center_id, id AS patient_id, dni FROM patients
), d AS (
    SELECT u.center_id, doc.id AS doctor_id, u.dni
    FROM doctors doc
             JOIN users u ON u.center_id = doc.center_id AND u.id = doc.user_id
)
INSERT INTO medical_consultations (center_id, patient_id, doctor_id, "date", diagnosis, treatment, notes)
VALUES
-- Paciente 1 (Alice, centro 1) con doctor DNI 1849488182 (centro 1)
((SELECT center_id FROM p WHERE dni='patient001'),
 (SELECT patient_id FROM p WHERE dni='patient001'),
 (SELECT doctor_id  FROM d WHERE dni='1849488182' AND center_id=(SELECT center_id FROM p WHERE dni='patient001')),
 '2025-09-21 10:00:00','Gripe común','Reposo y líquidos','Paciente con fiebre y tos'),
((SELECT center_id FROM p WHERE dni='patient001'),
 (SELECT patient_id FROM p WHERE dni='patient001'),
 (SELECT doctor_id  FROM d WHERE dni='1849488182' AND center_id=(SELECT center_id FROM p WHERE dni='patient001')),
 '2025-09-22 11:30:00','Dolor de cabeza','Analgésicos','Dolor leve, seguimiento recomendado'),

-- Paciente 2 (Bob, centro 1) con doctor DNI 1849488182 (centro 1) y 1552501056 (centro 1)
((SELECT center_id FROM p WHERE dni='patient002'),
 (SELECT patient_id FROM p WHERE dni='patient002'),
 (SELECT doctor_id  FROM d WHERE dni='1849488182' AND center_id=(SELECT center_id FROM p WHERE dni='patient002')),
 '2025-09-23 09:00:00','Chequeo rutinario','Ninguno','Todo dentro de parámetros normales'),
((SELECT center_id FROM p WHERE dni='patient002'),
 (SELECT patient_id FROM p WHERE dni='patient002'),
 (SELECT doctor_id  FROM d WHERE dni='1552501056' AND center_id=(SELECT center_id FROM p WHERE dni='patient002')),
 '2025-09-24 14:15:00','Infección de garganta','Antibióticos','Revisar respuesta en 5 días'),

-- Paciente 3 (Carol, centro 2) con doctor DNI 1617335060 (centro 2)
((SELECT center_id FROM p WHERE dni='patient003'),
 (SELECT patient_id FROM p WHERE dni='patient003'),
 (SELECT doctor_id  FROM d WHERE dni='1617335060' AND center_id=(SELECT center_id FROM p WHERE dni='patient003')),
 '2025-09-25 08:45:00','Control postoperatorio','Curaciones y reposo','Paciente estable, cicatrización correcta'),

-- Paciente 4 (David, centro 2) con doctor DNI 2002638654 (centro 2)
((SELECT center_id FROM p WHERE dni='patient004'),
 (SELECT patient_id FROM p WHERE dni='patient004'),
 (SELECT doctor_id  FROM d WHERE dni='2002638654' AND center_id=(SELECT center_id FROM p WHERE dni='patient004')),
 '2025-09-25 09:30:00','Dolor de espalda','Fisioterapia','Seguir tratamiento por 2 semanas'),

-- Paciente 5 (Eva, centro 3) con doctor DNI 0227907425 (centro 3)
((SELECT center_id FROM p WHERE dni='patient005'),
 (SELECT patient_id FROM p WHERE dni='patient005'),
 (SELECT doctor_id  FROM d WHERE dni='0227907425' AND center_id=(SELECT center_id FROM p WHERE dni='patient005')),
 '2025-09-26 10:00:00','Alergia estacional','Antihistamínicos','Revisar síntomas en 1 semana');

COMMIT;

-- ================================================
-- Tips de uso:
-- - Al crear un nuevo centro:
--     INSERT INTO medical_centers (name, city, address) VALUES ('Nuevo', 'Ciudad', 'Dir');
--   => El trigger creará automáticamente:
--      users_c<N>, patients_c<N>, doctors_c<N>, medical_consultations_c<N>,
--      verification_tokens_c<N>, users_roles_c<N>
-- - Insertar un usuario SIEMPRE incluye center_id:
--     INSERT INTO users (center_id, dni, email, password, first_name, last_name)
--     VALUES (4, '...', '...', crypt('x', gen_salt('bf')), 'Nombre', 'Apellido');
-- ================================================
